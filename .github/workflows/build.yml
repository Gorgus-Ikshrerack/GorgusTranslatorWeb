name: Deploy to GitHub Pages

on:
  push:
  workflow_call:
  workflow_dispatch:
    inputs:
      updateGorgusTranslator:
        description: "Update Gorgus Translator"
        required: true
        default: false
        type: boolean
      gorgusTranslatorRepo:
        description: "Gorgus Translator Repository"
        required: true
        default: "https://github.com/SpookyDervish/Gorgus-Translator.git"
        type: string
      gorgusTranslatorBranch:
        description: "Gorgus Translator Branch"
        required: true
        default: "main"
        type: string

env:
  EM_VERSION: 4.0.5
  #EM_CACHE_FOLDER: "emsdk-cache"
  USE_CCACHE: 'true'
  CCACHE_DIR: "ccache-dir"
  PYTHON_VERSION: '3.14'

jobs:
  build_site:
    runs-on: ubuntu-latest
    steps:
      - name: Update APT
        run: sudo apt-get update

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: pnpm

      - name: Checkout Python
        if: ${{ env.PYTHON_VERSION != '3.15' }}
        uses: actions/checkout@v4
        with:
          repository: 'python/cpython'
          path: "cpython"
          ref: ${{ env.PYTHON_VERSION }}

      - name: Checkout Python (No Explict Ref)
        if: ${{ env.PYTHON_VERSION == '3.15' }}
        uses: actions/checkout@v4
        with:
          repository: 'python/cpython'
          path: "cpython"

      #- name: Print PATH
      #  run: |
      #    echo $PATH

      - name: Install dependencies
        run: pnpm install

      - name: Get Git Hash of CPython
        run: |
          cd cpython
          echo "CPYTHON_GIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
          cd ..

      - name: Setup CPython Cache
        id: cache-cpython
        uses: actions/cache@v4
        with:
          path: cpython/cross-build/
          key: cpython-${{ env.CPYTHON_GIT_HASH }}-cache-${{ runner.os }}

      - name: Setup CPython Config Cache
        if: steps.cache-cpython.outputs.cache-hit != 'true'
        id: cache-cpython-config-cache
        uses: actions/cache@v4
        with:
          path: |
            **/config.cache
          key: cpython-config-cache-${{ runner.os }}

      - name: Setup EMSDK Cache
        if: steps.cache-cpython.outputs.cache-hit != 'true'
        id: cache-em-cache
        uses: actions/cache@v4
        with:
          path: |
            emsdk
            ${{ env.EM_CACHE_FOLDER }}
            ${{ env.CCACHE_DIR }}
          key: emsdk-${{env.EM_VERSION}}-${{ runner.os }}

      #- name: Setup EMSDK
      #  uses: mymindstorm/setup-emsdk@v14
      #  with:
      #    version: ${{env.EM_VERSION}}
      #    actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
      #    no-cache: 'true'

      - name: Checkout EMSDK
        if: steps.cache-cpython.outputs.cache-hit != 'true' && steps.cache-em-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: 'emscripten-core/emsdk'
          path: "emsdk"

      - name: Setup EMSDK
        if: steps.cache-cpython.outputs.cache-hit != 'true' && steps.cache-em-cache.outputs.cache-hit != 'true'
        run: |
          cd emsdk
          ./emsdk install ${{ env.EM_VERSION }}
          ./emsdk activate ${{ env.EM_VERSION }}
          cd ..

      - name: Add EMSDK to Environment
        if: steps.cache-cpython.outputs.cache-hit != 'true'
        run: |
          EMSDK_CMD=1 ./emsdk/emsdk construct_env
          sed -i "s/SET //g" ./emsdk/emsdk_set_env.bat
          mv ./emsdk/emsdk_set_env.bat ./emsdk/emsdk_set_env
          cat ./emsdk/emsdk_set_env >> $GITHUB_ENV

      - name: Install CCache
        if: env.USE_CCACHE == 'true' && steps.cache-cpython.outputs.cache-hit != 'true'
        run: sudo apt-get install ccache -y

      - name: Use CCache
        if: env.USE_CCACHE == 'true' && steps.cache-cpython.outputs.cache-hit != 'true'
        run: |
          echo "EM_COMPILER_WRAPPER=ccache" >> $GITHUB_ENV

      - name: Build Emscripten CPython
        if: steps.cache-cpython.outputs.cache-hit != 'true'
        run: ./get_python_wasm.ps1 ${{ env.PYTHON_VERSION }} $false
        shell: pwsh

      - name: Manually Copy CPython
        if: steps.cache-cpython.outputs.cache-hit == 'true'
        run: |
          New-Item -Type Directory ./src/lib/python/wasm
          Copy-Item "./cpython/cross-build/wasm32-emscripten/build/python/web_example/python${{ env.PYTHON_VERSION }}.zip"  ./src/lib/python/wasm
          Copy-Item "./cpython/cross-build/wasm32-emscripten/build/python/python.wasm"                                      ./src/lib/python/wasm
          Copy-Item "./cpython/cross-build/wasm32-emscripten/build/python/python.mjs"                                       ./src/lib/python/wasm
        shell: pwsh

      - name: Update Gorgus Translator
        if: ${{ inputs.updateGorgusTranslator }}
        run: |
          cd Gorgus-Translator
          git remote add updated ${{ inputs.gorgusTranslatorRepo }}
          git fetch --all
          git checkout updated/${{ inputs.gorgusTranslatorBranch }}
        shell: pwsh

      - name: Download PIP Dependencies
        run: ./download_pip.ps1
        shell: pwsh

      - name: Download NLTK Dependencies
        run: ./download_nltk.ps1
        shell: pwsh

      - name: Copy coi-serviceworker
        run: Copy-Item node_modules/coi-serviceworker/coi-serviceworker.js static/
        shell: pwsh

      - name: Package Prior Dependencies
        run: node ./src/lib/fsSetup.compile.ts
        shell: pwsh

      - name: Build
        env:
          BASE_PATH: '/${{ github.event.repository.name }}'
        run: |
          pnpm run build

      - name: Upload Page Artifacts
        if: ${{ github.event_name != 'workflow-call' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'build/'

      - name: Determine Artifact Name
        if: ${{ github.event_name == 'workflow-call' }}
        shell: pwsh
        run: |
          $artifactName = "${{ github.run_number }}-build"
          echo "ARTIFACT=$artifactName" >> $GITHUB_OUTPUT
          echo "ARTIFACT=$artifactName" >> $GITHUB_ENV

      - name: Upload Artifacts
        if: ${{ github.event_name == 'workflow-call' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: "/"

  deploy:
    needs: build_site
    if: ${{ github.event_name != 'workflow-call' && github.ref == 'main' }}
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4